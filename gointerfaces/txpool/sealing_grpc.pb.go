// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: txpool/sealing.proto

package txpool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SealingClient is the client API for Sealing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SealingClient interface {
	SealBlock(ctx context.Context, in *SealRequest, opts ...grpc.CallOption) (*SealResponse, error)
}

type sealingClient struct {
	cc grpc.ClientConnInterface
}

func NewSealingClient(cc grpc.ClientConnInterface) SealingClient {
	return &sealingClient{cc}
}

func (c *sealingClient) SealBlock(ctx context.Context, in *SealRequest, opts ...grpc.CallOption) (*SealResponse, error) {
	out := new(SealResponse)
	err := c.cc.Invoke(ctx, "/txpool.Sealing/SealBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SealingServer is the server API for Sealing service.
// All implementations must embed UnimplementedSealingServer
// for forward compatibility
type SealingServer interface {
	SealBlock(context.Context, *SealRequest) (*SealResponse, error)
	mustEmbedUnimplementedSealingServer()
}

// UnimplementedSealingServer must be embedded to have forward compatible implementations.
type UnimplementedSealingServer struct {
}

func (UnimplementedSealingServer) SealBlock(context.Context, *SealRequest) (*SealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SealBlock not implemented")
}
func (UnimplementedSealingServer) mustEmbedUnimplementedSealingServer() {}

// UnsafeSealingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SealingServer will
// result in compilation errors.
type UnsafeSealingServer interface {
	mustEmbedUnimplementedSealingServer()
}

func RegisterSealingServer(s grpc.ServiceRegistrar, srv SealingServer) {
	s.RegisterService(&Sealing_ServiceDesc, srv)
}

func _Sealing_SealBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SealingServer).SealBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpool.Sealing/SealBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SealingServer).SealBlock(ctx, req.(*SealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sealing_ServiceDesc is the grpc.ServiceDesc for Sealing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sealing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "txpool.Sealing",
	HandlerType: (*SealingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SealBlock",
			Handler:    _Sealing_SealBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "txpool/sealing.proto",
}
